---
title: "Trends of Road Traffic Accidents - April 2024"
subtitle: "Report Ending April 2024" 
author: "Daniel Eurien"
date: "2024-05-28"
categories: [news]
image: "acci.jpg"
---

::: callout-note
This blog utilizes accident data sourced from daily newspapers. It does not aim to substitute or dispute official police traffic reports. Instead, it aims to complement the existing narrative by providing additional context to the road traffic accident reports disseminated by the media. As such, any interpretation of these findings should be done with this context in mind.This monthly blog therefore seeks to provide patterns of major accidents on highways, given that the majority of such incidents are covered by the media. The process of data extraction can be found in separate blog ['Process of data aquisition and model building'](%22https://euriendd.github.io/AI-for-Public-Good-Blog/posts/data%20aquisition%20process/accident-data-aquisition.html%22).
:::

```{r}
#| echo: false
#| warning: false
pacman::p_load(rio, 
               here,
               plotly,
               ggvis,
               janitor,
               lattice,
               RcolorBrewer,
               gridExtra,
               tidyverse, 
               magrittr, 
               janitor, 
               lubridate, 
               skimr, 
               scales, 
               gghighlight,
               naniar,
               lubridate,
               viridis,
               wesanderson,
               hrbrthemes)
df <- read.csv("C:/Users/deurien/Dropbox/MBA/Company/Accident blog post/Project/Blog_project/data/final_clean_data_April24.csv")
#clean names--------------------------------------------------------------------
df_clean <- df |>
  clean_names()
# Replace NA with 0 in the "dead" column----------------------------------------
df_clean$dead <- ifelse(is.na(df_clean$dead), 0, df_clean$dead)
# Apply regular expression to extract date from the "Publish Date" column
#df_clean$publish_date <- str_extract(df_clean$publish_date, "\\d{4}-\\d{2}-\\d{2}")
# Replace all missing values with NA
df_clean <- df_clean %>%
mutate(across(everything(), ~ifelse(. == "", NA, .)))
```

# Data Completeness

We only considered variables with \>70% completeness for quantitative analysis. Meanwhile, variables with more than 30% missing data were analyzed qualitatively using natural language processing techniques, including word cloud analysis.

```{r}
#| echo: false
#| warning: false

# Select columns from "title" to "day_night" and count null values
null_counts <- df_clean |> 
  select(title:day_night) |> 
  summarise_all(~sum(is.na(.)))

# Calculate the proportion of missing values
total_rows <- nrow(df_clean)
missing_proportion <- round(null_counts / total_rows * 100, 2)

#pivot long---------------------------------------------------------------------
plot_data_long <- missing_proportion |> 
  pivot_longer(cols = c('title':'day_night'),
               names_to = 'variable',
               values_to = 'proportion'
) |> 
  mutate(variable = case_when(
    variable == "travel_to" ~ "Travel to",
    variable == "travel_from" ~ "Travel from",
    variable == "registration" ~ "Car registration",
    variable == "cause_of_accident" ~ "Cause of accident",
    variable == "day_of_accident" ~ "Day of accident",
    variable == "cars" ~ "Cars",
    variable == "cars_involved" ~ "Cars involved",
    variable == "village_of_accident" ~ "Village of accident",
    variable == "road" ~ "Road",
    variable == "type_of_accident" ~ "Type of accident",
    variable == "time" ~ "Time of accident",
    variable == "title" ~ "Title",
    variable == "publish_date" ~ "Publish date",
    variable == "place_of_accident"~ "Place of accident",
    variable == "dead" ~ "Dead",
    variable == "day_night" ~ "Time of day",
    TRUE ~ variable  
  ))

# Plot bar graph
ggplot(plot_data_long, aes(x = fct_reorder(variable, proportion), y = proportion, fill = variable, label = proportion)) +
  geom_bar(stat = "identity") +
  geom_text(vjust = -0.1, hjust = -0.2, size = 3, color = "darkred") +
  labs(x = "Variable", 
       y = "Proportion of Missing Values (%)", size = 16,
       title = "Proportion of Missing Values by Variable, 2021-2024",
       subtitle = expression(italic("Shows Percentage of Values Missing by Variable Extracted from News Articles")),
       caption = "We only considered variables with more 70% completeness for quantitative analysis") +
  scale_fill_viridis_d(option = "viridis", alpha = 0.7) +
  scale_y_continuous(expand = c(0, 0)) +
  theme_light() +
  coord_flip() +
  guides(fill = FALSE)+
  theme(
  plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
  plot.subtitle = element_text(face = "bold", size = 10, color = 'royalblue'), 
  axis.text.x = element_text(hjust = 0, size = 10, face = 'bold'),  
  axis.text.y = element_text(size = 10, face = 'bold'),  
  legend.position = 'none'
) 
```

# Trend in Road Traffic Accidents

## Trend of Total Accidents Reported in Newspapers, 2021-2024

The number of highway accidents reported in newspapers in the first one-third of 2024 is already one-third of the average over the past 3 years from 2021-2023, indicating a similar elevated trajectory in 2024.

```{r}
#| echo: false
#| warning: false
  #Accidents by month=============================================================

#Create month from publish date ------------------------------------------------
# Assuming 'publish_date' is in date format, if not, convert it to date format first
df_month <- df_clean |> 
  mutate(publish_date = as.Date(publish_date, format = "%d %B %Y"))
  
  

df_m <- df_month |> 
  mutate(month = month(publish_date),
         year = year(publish_date)) 
#Group accidints by year--------------------------------------------------------

# Extract year from 'publish_date'
df_m_y <- df_m %>%
  mutate(year = year(publish_date))


#YEAR===========================================================================
# Group by year and count number of accidents
accidents_by_year <- df_m_y %>%
  group_by(year) %>%
  summarise(total_accidents = n()) |> 
  na.omit()

# Plot bar chart showing count of accidents by year=============================
COLORS <- c("#482677FF", "#287D8EFF", "#73D055FF", "#FDE725FF")

ggplot(accidents_by_year, aes(x = factor(year), y = total_accidents, fill = factor(year), label = total_accidents)) +
  geom_bar(stat = "identity", alpha = 0.7) +
  geom_text(vjust = 1.2, hjust = 0.2, size = 4, color = "darkred") +
  theme(axis.text.x = element_text(angle = 45, hjust = 0, size = 14),  # Adjust font size for x-axis labels
        axis.text.y = element_text(size = 14, margin = margin(t = 0, r = 0, b = 0, l = 0)),  # Adjust font size for y-axis labels
        legend.position = 'none') +
  scale_fill_manual(values = COLORS) + 
  scale_y_continuous(expand = c(0, 0))+
  theme_light() +
  guides(fill = FALSE)+
labs(x = "Year", 
       y = "Number of Road Accidents(%)", size = 16,
       title = "Overall Number of Accidents Reported in Daily Newspapers, 2021-2024",
       subtitle = expression(italic("")),
       caption = "The number of accidents in 2024 are for the first third of the year(Jan-Apr)") +
  #scale_fill_viridis_d(option = "viridis", alpha = 0.7) +
  scale_y_continuous(expand = c(0, 0)) +
  theme_light() +
  guides(fill = FALSE)+
  theme(plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
  plot.subtitle = element_text(face = "bold", size = 10, color = 'royalblue'), 
  axis.text.x = element_text(hjust = 0, size = 10, face = 'bold'),  
  axis.text.y = element_text(size = 10, face = 'bold'),  
  legend.position = 'none'
)
```

## Trend of Total Accidents by Month

There is an overall spike in the number of accidents reported in May followed by November to December period.

```{r}
#| echo: false
#| warning: false
#MONTH==========================================================================
# Group by month, and count number of accidents========================
accidents_by_month <- df_m_y %>%
  group_by(month) %>%
  summarise(total_accidents = n()) %>%
  na.omit()


# Define the start and end months for the highlighted box
highlight_start <- 11
highlight_end <- 12    

# Plot line graph faceted by year
ggplot(accidents_by_month, aes(x = month, y = total_accidents)) +
  geom_line(color = '#FF5733', size = 1) +
  geom_point(color = 'darkred', size = 2.5)+
  scale_x_continuous(breaks = 1:12, labels = month.abb) +  # Use month abbreviations on x-axis
  theme_light() +
  #facet_wrap(~ year, ncol = 1) +  # Facet by year
  geom_rect(aes(xmin = highlight_start - 0.5, xmax = highlight_end + 0.5, ymin = -Inf, ymax = Inf), fill = "red", alpha = 0.02) +
  annotate("text", x = (highlight_start + highlight_end) / 2, y = max(accidents_by_month$total_accidents), 
           label = "Increase", vjust = -0.07, hjust = 0.5, size = 4)+
  geom_vline(xintercept = 5, linetype = "dashed", color = "blue", size = 2,
             label = 'Increase in accidents', alpha = 0.8)+
  labs(x = "Month", 
       y = "Total Accidents", size = 16,
       title = "Total Accidents by Month and Year",
       subtitle = expression(italic("Monthly Trend")),
       caption = "Represents a monthly aggregate of number of accidents from 2021-2024") +
  #scale_fill_viridis_d(option = "viridis", alpha = 0.7) +
  scale_y_continuous(expand = c(0, 0)) +
  theme_light() +
  guides(fill = FALSE)+
  theme(plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
  plot.subtitle = element_text(face = "bold", size = 10, color = 'royalblue'), 
  axis.text.x = element_text(hjust = 0, size = 10, face = 'bold'),  
  axis.text.y = element_text(size = 10, face = 'bold'),  
  legend.position = 'none'
)
```

## Trend of Total Accidents Reported by Month Faceted by Year

There is a consistent marginal increase in road accidents reported by newspapers in May in all 3 years between 2021 to 2023. However, this report only covers data up to April.

```{r}
#| echo: false
#| warning: false
#YEAR_MONTH=====================================================================
# Group by year and month, and count number of accidents========================
accidents_by_year_month <- df_m_y %>%
  group_by(year, month) %>%
  summarise(total_accidents = n()) %>%
  na.omit()

# Define the start and end months for the highlighted box
highlight_start <- 11
highlight_end <- 12    

# Plot line graph faceted by year
ggplot(accidents_by_year_month, aes(x = month, y = total_accidents)) +
  geom_line(color = '#FF5733', size = 1) +
  geom_point(color = 'darkred', size = 2.5)+
  scale_x_continuous(breaks = 1:12, labels = month.abb) +  # Use month abbreviations on x-axis
  theme_light() +
  facet_wrap(~ year, ncol = 1) +  # Facet by year
  geom_rect(aes(xmin = highlight_start - 0.5, xmax = highlight_end + 0.5, ymin = -Inf, ymax = Inf), fill = "red", alpha = 0.02) +
  annotate("text", x = (highlight_start + highlight_end) / 2, y = max(accidents_by_month$total_accidents), 
           label = "Increase", vjust = -0.0005, hjust = 0.3, size = 3)+
  geom_vline(xintercept = 5, linetype = "dashed", color = "blue", size = 2,
             label = 'Increase in accidents', alpha = 0.8)+
   labs(x = "Month", 
       y = "Total Accidents", size = 16,
       title = "Total Accidents by Month and Year",
       subtitle = expression(italic("Monthly Trend over the years(2021-2024)")),
       caption = "Represents a monthly aggregate of number of accidents from 2021-2024") +
  #scale_fill_viridis_d(option = "viridis", alpha = 0.7) +
  scale_y_continuous(expand = c(0, 0)) +
  theme_light() +
  guides(fill = FALSE)+
  theme(plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
  plot.subtitle = element_text(face = "bold", size = 10, color = 'royalblue'), 
  axis.text.x = element_text(hjust = 0, size = 10, face = 'bold'),  
  axis.text.y = element_text(size = 10, face = 'bold'),  
  legend.position = 'none'
)
```

## Total Number of Accidents Rported by Month by Type of Car Involved

Trucks registered the highest number of accidents consistent reported by newspapers over the 12 months of year.

```{r}
#| echo: false
#| warning: false
#Accident by type of car =======================================================
accidents_cars <- df_m_y %>%
  group_by(cars, month) %>%
  summarise(total_accidents = n()) %>%
  na.omit()

# Plot the heatmap--------------------------------------------------------------
ggplot(accidents_cars, aes(x = month, y = factor(cars), fill = total_accidents)) + 
  geom_tile() +
  scale_fill_gradient(low = "#FCA594", high = "#AE123A", na.value = "grey") +  # Adjust the color gradient
  scale_x_continuous(breaks = 1:12, labels = month.abb) +  # Set x-axis to show months
  theme_light()+
   labs(x = "Month", 
       y = "Type of car", size = 16,
       title = "Total Accidents by Month and Type of Car",
       subtitle = expression(italic("Monthly Aggregate")),
       caption = "") +
  #scale_fill_viridis_d(option = "viridis", alpha = 0.7) +
  #scale_y_continuous(expand = c(0, 0)) +
  theme_light() +
  guides(fill = FALSE)+
  theme(plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
  plot.subtitle = element_text(face = "bold", size = 10, color = 'royalblue'), 
  axis.text.x = element_text(hjust = 0, size = 10, face = 'bold'),  
  axis.text.y = element_text(size = 10, face = 'bold'),  
  legend.position = 'none'
)
```

## Total Number of Accidents Rported by Month by Type of Car Involved Faceted by Year

Trucks registered the highest number of accidents consistent reported by newspapers over the 12 months of the period 2021 to 2023, including the first quarter of 2024.

```{r}
#| echo: false
#| warning: false
#Group by year and facet by year------------------------------------------------
accidents_cars_f <- df_m_y %>%
  group_by(cars, month, year) %>%
  summarise(total_accidents = n()) %>%
  na.omit()

ggplot(accidents_cars_f, aes(x = month, y = factor(cars), fill = total_accidents)) + 
  geom_tile() +
  scale_fill_gradient(low = "#FCA594", high = "#AE123A", na.value = "pink") +  # Adjust the color gradient
  scale_x_continuous(breaks = 1:12, labels = month.abb) +  # Set x-axis to show months
  theme_light()+
  facet_wrap(~ year, ncol = 1)+
  labs(x = "Month", 
       y = "Type of car", size = 16,
       title = "Total Accidents by Month and Type of Car, 2021-2024",
       subtitle = expression(italic("Monthly Aggregate")),
       caption = "") +
  #scale_fill_viridis_d(option = "viridis", alpha = 0.7) +
  #scale_y_continuous(expand = c(0, 0)) +
  theme_light() +
  guides(fill = FALSE)+
  theme(plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
  plot.subtitle = element_text(face = "bold", size = 10, color = 'royalblue'), 
  axis.text.x = element_text(hjust = 0, size = 10, face = 'bold'),  
  axis.text.y = element_text(size = 5, face = 'bold'),  
  legend.position = 'none'
)
```

# Time Analysis

## Total Number of Accidents Reported by Time of Occurrence

The highest proportion of accidents reported happened at 6 am in the morning.

```{r}
#| echo: false
#| warning: false
#TIME===========================================================================
#Group by year and facet by year------------------------------------------------
accidents_cars_t <- df_m_y %>%
  group_by(time) %>%
  summarise(total_accidents = n()) %>%
  na.omit()


ggplot(accidents_cars_t, aes(x = factor(time), y = total_accidents, fill = factor(time), label = total_accidents)) +
  geom_bar(stat = "identity", alpha = 0.7) +
  labs(x = "Time(Hours)", y = "Number of Road Accidents", title = "Number of Accidents Reported in Daily Newspapers", size = 14) +
  theme(axis.text.x = element_text(angle = 45, hjust = 0, size = 14),  # Adjust font size for x-axis labels
        axis.text.y = element_text(size = 14, margin = margin(t = 0, r = 0, b = 0, l = 0)),  # Adjust font size for y-axis labels
        legend.position = 'none') +
  scale_y_continuous(expand = c(0, 0))+
  theme_light() +
  guides(fill = FALSE) +
  scale_fill_viridis_d()+
  labs(x = "Time of Day", 
       y = "Number of Accidents", size = 16,
       title = "Number of Accidents Reported by Daily Newspapers, 2021-2024",
       subtitle = expression(italic("Hourly Aggregate")),
       caption = "24 hour time used") +
  #scale_fill_viridis_d(option = "viridis", alpha = 0.7) +
  #scale_y_continuous(expand = c(0, 0)) +
  theme_light() +
  guides(fill = FALSE)+
  theme(plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
  plot.subtitle = element_text(face = "bold", size = 10, color = 'royalblue'), 
  axis.text.x = element_text(hjust = 0, size = 10, face = 'bold'),  
  axis.text.y = element_text(size = 10, face = 'bold'),  
  legend.position = 'none'
)
```

## Total Number of Accidents Reported by Time of Occurence by car type

Accidents occured most at 6am, this was consistent for most of the car types. Trucks had the highest number of road crushes happening at 6 am in the morning followed by Private cars

```{r}
#| echo: false
#| warning: false
  #Facet by car type--------------------------------------------------------------
accidents_cars_fa <- df_m_y %>%
  group_by(time, cars) %>%
  filter(cars %in% c('Bus', 'Truck', 'Commuter taxi', 'Private cars')) |> 
  summarise(total_accidents = n()) %>%
  na.omit()

ggplot(accidents_cars_fa, aes(x = factor(time), y = total_accidents, fill = factor(time), label = total_accidents)) +
  geom_bar(stat = "identity", alpha = 0.7) +
  theme(axis.text.x = element_text(angle = 45, hjust = 0, size = 14),  # Adjust font size for x-axis labels
        axis.text.y = element_text(size = 14, margin = margin(t = 0, r = 0, b = 0, l = 0)),  # Adjust font size for y-axis labels
        legend.position = 'none') +
  scale_y_continuous(expand = c(0, 0))+
  theme_light() +
  guides(fill = FALSE)+
  facet_wrap(~ cars, ncol = 2)+
scale_fill_viridis_d()+
  labs(x = "Time of Day", 
       y = "Number of Accidents", size = 16,
       title = "Number of Accidents Reported by Daily Newspapers, 2021-2024",
       subtitle = expression(italic("Hourly Aggregate")),
       caption = "24 hour time used") +
  #scale_fill_viridis_d(option = "viridis", alpha = 0.7) +
  #scale_y_continuous(expand = c(0, 0)) +
  theme_light() +
  guides(fill = FALSE)+
  theme(plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
  plot.subtitle = element_text(face = "bold", size = 10, color = 'royalblue'), 
  axis.text.x = element_text(hjust = 0, size = 8, face = 'bold'),  
  axis.text.y = element_text(size = 10, face = 'bold'),  
  legend.position = 'none'
)


```

## Total Number of Accidents by month and accident type

Most accidents happened at 6 am in the morning with cars overturning being the commonest type of accident. Atleast all accident type registered atleast 1 accident at 6 am in the morning.

```{r}
#| echo: false
#| warning: false
  #Facet by type of accident------------------------------------------------------
accidents_cars_at <- df_m_y %>%
  group_by(time, type_of_accident) %>%
  summarise(total_accidents = n()) %>%
  na.omit()

ggplot(accidents_cars_at, aes(x = time, y = factor(type_of_accident), fill = total_accidents)) + 
  geom_tile() +
  scale_fill_gradient(low = "#FCA594", high = "#AE123A", na.value = "pink") +  # Adjust the color gradient
  scale_x_continuous(breaks = 0:23) +  # Set x-axis to show months
  theme_light()+
  geom_vline(xintercept = 6, linetype = "dashed", color = "blue", size = 0.8,
             label = 'Most road crushes', alpha = 0.8)+
labs(x = "Type of Accident", 
       y = "Time of Day", size = 16,
       title = "Number of Accidents by Accident Type and Time of Day, 2021-2024",
       subtitle = expression(italic("Hourly Aggregate")),
       caption = "24 hour time used") +
  #scale_fill_viridis_d(option = "viridis", alpha = 0.7) +
  #scale_y_continuous(expand = c(0, 0)) +
  theme_light() +
  guides(fill = FALSE)+
  theme(plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
  plot.subtitle = element_text(face = "bold", size = 10, color = 'royalblue'), 
  axis.text.x = element_text(hjust = 0, size = 8, face = 'bold'),  
  axis.text.y = element_text(size = 10, face = 'bold'),  
  legend.position = 'none'
)

  
```

## Total Number of Accidents by month and accident type over the three years

Generally, most accidents happened at 6 am in the morning. Cars overturning was the most type of accident reported at 6 am over the 3 years from 2021 to 2023, however, this has not been observed in 2024.

```{r}
#| echo: false
#| warning: false
  #Facet by year------------------------------------------------------------------
#Facet by type of accident------------------------------------------------------
accidents_cars_at_yr <- df_m_y %>%
  group_by(time, type_of_accident,year) %>%
  summarise(total_accidents = n()) %>%
  na.omit()

ggplot(accidents_cars_at_yr, aes(x = time, y = factor(type_of_accident), fill = total_accidents)) + 
  geom_tile() +
  scale_fill_gradient(low = "#FCA594", high = "#AE123A", na.value = "pink") +  # Adjust the color gradient
  scale_x_continuous(breaks = 0:23) +  # Set x-axis to show months
  theme_light()+
  facet_wrap(~ year, ncol = 2)+
  geom_vline(xintercept = 6, linetype = "dashed", color = "blue", size = 0.8,
             label = 'Most road crushes', alpha = 0.8)+
labs(x = "Type of Accident", 
       y = "Time of Day", size = 16,
       title = "Number of Accidents by Accident Type and Time of Day, 2021-2024",
       subtitle = expression(italic("Hourly Aggregate")),
       caption = "24 hour time used") +
  #scale_fill_viridis_d(option = "viridis", alpha = 0.7) +
  #scale_y_continuous(expand = c(0, 0)) +
  theme_light() +
  guides(fill = FALSE)+
  theme(plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
  plot.subtitle = element_text(face = "bold", size = 10, color = 'royalblue'), 
  axis.text.x = element_text(hjust = 0, size = 7, face = 'bold'),  
  axis.text.y = element_text(size = 6, face = 'bold'),  
  legend.position = 'none'
)

```

## Total Number of Accidents by type and time of day

Generally most head on collisions and cars ramming onto stationary trucks happened at night

```{r}
#| echo: false
#| warning: false
  #NIGHT-DAY======================================================================
accidents_day_night <- df_clean %>%
  group_by(day_night, type_of_accident) %>%
  summarise(total_accidents = n()) %>%
  na.omit() |> 
  mutate(type_of_accident = case_when(
    type_of_accident == "overturned" ~ "Overturned",
    type_of_accident == "head on collision" ~ "Head on collision",
    type_of_accident == "knocked pedestrian" ~ "Knocked pedestrian",
    type_of_accident == "crahed motorcycle" ~ "Crashed motorcycle",
    type_of_accident == "rammed into stationary  truck" ~ "Rammed into stationary truck",
    type_of_accident == "rammed other vehicle" ~ "Rammed other vehicle",
    type_of_accident == "rammed into house" ~ "Rammed into house",
    type_of_accident == "fell off a car" ~ "Fell off a car",
    type_of_accident == "burst into flames" ~ "Bust into flames",
    type_of_accident == "swerved off the road" ~ "Swerved off the road",
    type_of_accident == "plunged into Karuma" ~ "Plunged into Karuma",
    TRUE ~ type_of_accident))


# Plot the stacked bar chart with text annotation
ggplot(accidents_day_night, aes(x = fct_reorder(type_of_accident, total_accidents), y = total_accidents, fill = day_night)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = ifelse(type_of_accident %in% c("head on collision", "rammed into stationary truck"), as.character(total_accidents), "")),
            vjust = -0.5, hjust = -0.2, size = 4, color = "darkred") +  # Add text annotation to specific bars
  labs(
    x = "Type of Accident",
    y = "Total Accidents",
    fill = "Time of Day",
    title = "Total Accidents by Day/Night and Type of Accident",
    subtitle = expression(italic("Chart shows Head on collisions and Cars ramming into Stationary Trucks Happen at Night")),
    caption = "Caption: Day was considered from 7am to 7pm\n Dight was considered 8pm to 6am"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10), 
    axis.text.y = element_text(size = 10),
    plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
    plot.subtitle = element_text(face = "bold", size = 12, color = 'royalblue'), 
    legend.position = 'right'
  ) +
  scale_fill_viridis_d(direction = -1) +
  scale_y_continuous(expand = c(0, 0)) +
  coord_flip()

```

## Total Number of Accidents by day of week

Generally more road crushed were reported on Monday and Tuesday, with the least number of road crushes reported on a Saturday.

```{r}
#| echo: false
#| warning: false
  #Day of accident================================================================
#Create day of week-------------------------------------------------------------
df_cleann <- df_clean %>%
  mutate(day_of_week = weekdays(as.Date(publish_date, format = "%d %B %Y")))
#Day of accident trend ---------------------------------------------------------
accidents_day <- df_cleann %>%
  group_by(day_of_week) %>%
  summarise(total_accidents = n()) %>%
  na.omit()

# Plot the bar chart
# Reorder the levels of the day_of_week factor
accidents_day$day_of_week <- factor(accidents_day$day_of_week, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))

# Plot the bar chart
ggplot(accidents_day, aes(x = day_of_week, y = total_accidents, fill = factor(total_accidents))) +
  geom_bar(stat = "identity", alpha=0.7) +
  labs(
    x = "Day of Week",
    y = "Number of Accidents",
    title = "Number of Accidents by Report Day",
    subtitle = expression(italic("Chart shows of Accidents by the Day Reported in the Newspaper")))+
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10), 
    axis.text.y = element_text(size = 10),
    plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
    plot.subtitle = element_text(face = "bold", size = 12, color = 'royalblue'), 
    legend.position = 'none'
  ) +
  scale_fill_viridis_d() +
  scale_y_continuous(expand = c(0, 0))
```

## Total Number of Accidents by day of week and time of day

Most road crushes reported by newspapers occured on a Monday monrning.

```{r}
#| echo: false
#| warning: false
  #Day of accident and time heat map----------------------------------------------
accidents_day_time <- df_cleann %>%
  group_by(day_of_week, time) %>%
  summarise(total_accidents = n()) %>%
  na.omit()

accidents_day_time$day_of_week <- factor(accidents_day_time$day_of_week, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))

# Plot the heatmap
# Plot the heatmap with a single gradual color scale
ggplot(accidents_day_time, aes(x = time, y = day_of_week, fill = total_accidents)) +
  geom_tile(color = "grey") +
  scale_fill_gradient(low = "royalblue", high = "red") +  # Use a single gradual color scale from blue to red
  labs(x = "Time", 
       y = "Day of Week", size = 16,
       title = "Number of Accidents by Day of the Week and Time, 2021-2024",
       subtitle = expression(italic("Hourly Aggregate")),
       caption = "24 hour time used") +
  #scale_fill_viridis_d(option = "viridis", alpha = 0.7) +
  #scale_y_continuous(expand = c(0, 0)) +
  theme_light() +
  guides(fill = FALSE)+
  theme(plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
  plot.subtitle = element_text(face = "bold", size = 10, color = 'royalblue'), 
  axis.text.x = element_text(hjust = 0, size = 10, face = 'bold'),  
  axis.text.y = element_text(size = 10, face = 'bold'),  
  legend.position = 'none'
)

```

## Total Number of Accidents by day of week over the three years

```{r}
#| echo: false
#| warning: false
  #Day of accident faceted by year------------------------------------------------
#Day of accident trend ---------------------------------------------------------
# Extract year from 'publish_date'
df_cleann <- df_cleann %>%
  mutate(year = year(as.Date(publish_date, format = "%d %B %Y")))

accidents_day_year <- df_cleann %>%
  group_by(day_of_week, year) %>%
  summarise(total_accidents = n()) %>%
  na.omit()

# Plot the bar chart
# Reorder the levels of the day_of_week factor
accidents_day_year$day_of_week <- factor(accidents_day_year$day_of_week, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))

# Plot the bar chart
ggplot(accidents_day_year, aes(x = day_of_week, y = total_accidents, fill = factor(total_accidents))) +
  geom_bar(stat = "identity", alpha=0.7) +
  labs(
    x = "Day of Week",
    y = "Number of Accidents",
    title = "Number of Accidents by Report Day",
    subtitle = expression(italic("Chart shows of Accidents by the Day Reported in the Newspaper")))+
  theme_minimal() +
  facet_wrap(~year, ncol = 1)+
  theme(
    axis.text.x = element_text(size = 10), 
    axis.text.y = element_text(size = 10),
    plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
    plot.subtitle = element_text(face = "bold", size = 12, color = 'royalblue'), 
    legend.position = 'none'
  ) +
  scale_fill_viridis_d() +
  scale_y_continuous(expand = c(0, 0))
```

## Total Number of Accidents by day of week and time of day over the three years

The prevalent occurrence of road crushes at 6 am in the morning is consistent over the three years under study. However, the consistency in days is only true on Monday mornings and spread ramdomly throught the days of the week when compared over the three years from 2021 to 2023, however, this has not yet been observed in 2024.

```{r}
#| echo: false
#| warning: false
  #Faceted by year================================================================
accidents_day_time_y <- df_cleann %>%
  group_by(day_of_week, time, year) %>%
  summarise(total_accidents = n()) %>%
  na.omit()

accidents_day_time_y$day_of_week <- factor(accidents_day_time_y$day_of_week, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))

# Plot the heatmap
# Plot the heatmap with a single gradual color scale
ggplot(accidents_day_time_y, aes(x = time, y = day_of_week, fill = total_accidents)) +
  geom_tile(color = "grey") +
  geom_tile(data = subset(accidents_day_time_y, is.na(total_accidents)), fill = "blue") +
  scale_fill_gradient(low = "royalblue", high = "red") +  # Use a single gradual color scale from blue to red
  facet_wrap(~year, ncol = 2)+
  scale_x_continuous(breaks = 0:23)+
  theme_light() +
  theme(
    axis.text.x = element_text(size = 10),  # Adjust font size of x-axis labels
    axis.text.y = element_text(size = 10),  # Adjust font size of y-axis labels
    plot.title = element_text(face = "bold", size = 18),  # Make title bold
    legend.title = element_text(face = "bold", size = 12),  # Make legend title bold
    legend.text = element_text(size = 10)  # Adjust font size of legend labels
  )+
labs(x = "Time", 
       y = "Day of Week", size = 16,
       title = "Number of Accidents by Day of the Week and Time, 2021-2024",
       subtitle = expression(italic("Hourly Aggregate")),
       caption = "24 hour time used") +
  #scale_fill_viridis_d(option = "viridis", alpha = 0.7) +
  #scale_y_continuous(expand = c(0, 0)) +
  theme_light() +
  guides(fill = FALSE)+
  theme(plot.title = element_text(face = "bold", size = 16, color = 'royalblue4'), 
  plot.subtitle = element_text(face = "bold", size = 10, color = 'royalblue'), 
  axis.text.x = element_text(hjust = 0, size = 8, face = 'bold'),  
  axis.text.y = element_text(size = 7, face = 'bold'),  
  legend.position = 'none'
)
```

# Summary

1.  E**levated accident trend:** The number of highway accidents reported in newspapers in the first quarter of 2024 is already one-third of the average over the past 3 years, indicating a similar elevated trajectory in 2024.
2.  **Seasonal spikes:** There are overall spikes in the number of accidents reported, with increases in May and the November-December period.
3.  **High truck involvement:** Trucks consistently registered the highest number of accidents reported by newspapers over the 12-month period and across the 2021-2023 years.
4.  **Morning peak:** The highest proportion of accidents occurred at 6 am, with trucks being the vehicle type most involved in crashes at this time.
5.  **Weekly patterns**: More accidents were reported on Mondays and Tuesdays, with the least on Saturdays. The 6 am peak on Mondays was a consistent trend across the 2021-2023 period.
